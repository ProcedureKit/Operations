lane :verify do
  verify_xcode  
end

lane :lint do

    swiftLint(
        mode: :lint, 
        config_file: '.swiftlint.yml'
    )
end

platform :ios do

  desc "Builds the iOS Extension compatible framework"
  lane :build_extension do
    
    xcodebuild(
      project: "Operations_ExtensionCompatible.xcodeproj",
      scheme: "iOS Extensions Operations",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )

  end

  desc "Test the iOS Extension compatible framework"
  lane :test_extension do
        
    scan(
      project: "Operations_ExtensionCompatible.xcodeproj",
      scheme: "iOS Extensions Operations",
      output_directory: ".ci/xcodebuild-data",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )    

  end
  
  
  desc "Runs all the tests"
  lane :test do
    
    test_extension()
    
    scan(
      project: "Operations.xcodeproj",
      scheme: "iOS Operations",
      output_directory: ".ci/xcodebuild-data",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )
    
    slather(
	    proj: "Operations.xcodeproj",
    	scheme: "iOS Operations",
    	build_directory: ".ci/xcodebuild-data",
    	use_bundle_exec: true    	
    )
	
  end

end

platform :mac do

  desc "Operations: Builds the OS X Extension compatible framework"
  lane :operations_build_extension do
    
    xcodebuild(
      project: "Operations_ExtensionCompatible.xcodeproj",
      scheme: "OS X Extensions Operations",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )

  end
  
  desc "Operations: Test the OS X Extension compatible framework"
  lane :operations_test_extension do
        
    scan(
      project: "Operations_ExtensionCompatible.xcodeproj",
      scheme: "OS X Extensions Operations",
      output_directory: ".ci/xcodebuild-data",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )    

  end  

  desc "Operations: Runs all the tests"
  lane :operations_test do

	operations_test_extension()

    scan(
      project: "Operations.xcodeproj",
      scheme: "OS X Operations",
      output_directory: ".ci/xcodebuild-data",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )

  end
  
  desc "ProcedureKit: Test macOS"
  lane :test do

    scan(
      project: "ProcedureKit.xcodeproj",
      scheme: "ProcedureKit",
      destination: "platform=OS X",
      output_directory: ".ci/xcodebuild-data",
      xcargs: "-derivedDataPath .ci/xcodebuild-data"
    )
  end
  
end
